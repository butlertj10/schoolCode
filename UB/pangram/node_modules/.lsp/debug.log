Hello - from c:\Users\T-Butt\.vscode\extensions\jaredly.reason-vscode-1.7.13\bin.native.exe.hot.exe
Previous log location: C:\Users\T-Butt\AppData\Local\Temp\lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///o%3A/test2/pangram.ml","languageId":"ocaml","version":1,"text":"let pangram (inFile : string) (outFile : string) : unit =\n\n  (* Here we open an input channel for first argument, inFile, \n     and bind it to a variable ic so that we can refer it \n     later in loop_read function. *)\n  let ic = open_in inFile in\n\n  (* Use the second argument as file name to open an output channel,\n     and bind it to variable oc for later reference. *)\n  let oc = open_out outFile in \n\n  (* Helper function: file input function. It reads file line by line\n     and return the result as a list of string.  *)\n  let rec loop_read acc =\n      (* We use try with to catch the End_of_file exception. *)\n      try \n          (* Read a line from ic. Build a new list with l::acc\n             and pass to next recursive call. *)\n          let l = input_line ic in loop_read (l::acc)\n      with\n        (* At the end of file, we will reverse the string since\n           the list is building by keeping add new element at the \n           head of old list. *)\n      | End_of_file -> List.rev acc in\n\n  (* Helper function: file output function. It takes a bool value and\n     write it to the output file. *)\n  let file_write bool_val = Printf.fprintf oc \"%b\\n\" bool_val in\n\n  (* This variable contains the result of input file from helper \n     function, loop_read. Please remember this is a list of string. *)\n  let ls_str = loop_read [] in\n  \n  let char_list = ['a'; 'b'; 'c'; 'd'; 'e'; 'f'; 'g'; 'h'; 'i'; 'j'; 'k';\n              'l'; 'm'; 'n'; 'o'; 'p'; 'q'; 'r'; 's'; 't'; 'u'; 'v';\n              'w'; 'x'; 'y'; 'z'] in\n  \n\n   let rec is_pangram st charlist =\n      match charlist with \n      | [] -> file_write true \n      | c::rest_cs -> if String.contains st c\n                     then is_pangram st rest_cs\n                     else file_write false\n      in \n      \n   let rec check_inputFile list_of_st = \n      match list_of_st with \n      | [] -> ()\n      | s::rest_s -> is_pangram s char_list; check_inputFile rest_s in \n\n   check_inputFile ls_str\n   ;;\n\n   (* remove before submission *)\npangram \"input.txt\" \"output.txt\"\n\n \n\n \n "}}}
